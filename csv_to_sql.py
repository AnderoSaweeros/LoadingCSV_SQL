{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 276,
   "id": "c03a2ab2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "import mysql.connector\n",
    "import json\n",
    "import logging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "id": "fbf112f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MySQLLoader:\n",
    "    \n",
    "    def __init__(self, config_file_path):\n",
    "        #reding the config file as a dict\n",
    "        self.config = self.read_config(config_file_path)\n",
    "        #connect to mysql server\n",
    "        if self.config:\n",
    "            self.mysql_connection = mysql.connector.connect(\n",
    "                host=self.config['mysql_host'],\n",
    "                user=self.config['mysql_user'],\n",
    "                password=self.config['mysql_password'],\n",
    "                database=self.config['mysql_database']\n",
    "            )\n",
    "            self.cursor = self.mysql_connection.cursor()\n",
    "\n",
    "            # Configure logger\n",
    "            logging.basicConfig(filename='mysql_loader.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
    "    \n",
    "    def __del__(self):\n",
    "        #making sure to close the connection even if the user doesn't do it\n",
    "        self.close_connection()\n",
    "    \n",
    "   \n",
    "    def get_mysql_connection(self):\n",
    "        return self.mysql_connection\n",
    "    \n",
    "    def get_cursor(self):\n",
    "        return self.cursor\n",
    "    \n",
    "    '''\n",
    "    user can send in a query and it will be exectued and ran\n",
    "    '''\n",
    "    def execute_query(self, query):\n",
    "        try:\n",
    "            self.cursor.execute(query)\n",
    "            self.mysql_connection.commit()\n",
    "        except Exception as e:\n",
    "            logging.error(f\"Error executing given query : {e}\")\n",
    "    \n",
    "    #class to close connection to the mysql server\n",
    "    def close_connection(self):\n",
    "        if self.mysql_connection.is_connected():\n",
    "            self.cursor.close()\n",
    "            self.mysql_connection.close()\n",
    "            logging.info(\"MySQL connection closed.\")\n",
    "            \n",
    "    #the given config file is opened here\n",
    "    def read_config(self, file_path):\n",
    "        try:\n",
    "            with open(file_path, 'r') as config_file:\n",
    "                config = json.load(config_file)\n",
    "            return config\n",
    "        except Exception as e:\n",
    "            logging.error(f\"Error reading configuration: {e}\")\n",
    "            return None\n",
    "        \n",
    "    '''\n",
    "    the majority of the work is done here.\n",
    "    we first open the the csv file given a path.\n",
    "    using the table name given is what will be CREATED in the server.\n",
    "    assuming the first line in the csv file is the header that will be the column name\n",
    "    continue reading the csv file and load each row into the table \n",
    "    log each step and any exeption that is thrown\n",
    "    '''\n",
    "    def load_csv_to_mysql(self, csv_file_path, table_name):\n",
    "        try:\n",
    "            # Read CSV file\n",
    "            with open(csv_file_path, 'r') as csv_file:\n",
    "                csv_reader = csv.reader(csv_file)\n",
    "                header = next(csv_reader)  # Assume the first row is header\n",
    "                \n",
    "                # writing a query to check \n",
    "                create_table_query = f\"CREATE TABLE IF NOT EXISTS {table_name} ({', '.join(f'{col} VARCHAR(255)' for col in header)});\"\n",
    "                self.cursor.execute(create_table_query)\n",
    "                logging.info(f\"Table '{table_name}' created or already exists.\")\n",
    "           \n",
    "                # Load data into MySQL\n",
    "                for row in csv_reader:\n",
    "                    columns = ', '.join(header)\n",
    "                    values = ', '.join(f\"'{val}'\" for val in row)\n",
    "                    query = f\"INSERT INTO {table_name} ({columns}) VALUES ({values})\"\n",
    "\n",
    "                    self.cursor.execute(query)\n",
    "                logging.info(f\"Data from '{csv_file_path}' loaded into '{table_name}'.\")\n",
    "                \n",
    "                # Commit the changes\n",
    "                self.mysql_connection.commit()\n",
    "                logging.info(f\"Data from '{csv_file_path}' committed into '{table_name}'.\")\n",
    "                \n",
    "        except Exception as e:\n",
    "            logging.error(f\"Error loading CSV to MySQL: {e}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "id": "f755218c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def main():\n",
    "    \n",
    "    config_file_path = 'config.json'\n",
    "    loader = MySQLLoader(config_file_path)\n",
    "\n",
    "    if loader.config:\n",
    "        loader.load_csv_to_mysql(loader.config['product_csv_path'], 'Products')\n",
    "        loader.load_csv_to_mysql(loader.config['sales_csv_path'], 'Sales')\n",
    "\n",
    "    # making the view\n",
    "        \n",
    "    query = \"\"\"\n",
    "        CREATE OR REPLACE VIEW ProductsSalesView AS\n",
    "        SELECT Sales.Day, Products.Brand, Sales.Sales\n",
    "        FROM Sales\n",
    "        INNER JOIN Products ON Sales.Product = Products.Product;\n",
    "        \"\"\"\n",
    "    loader.execute_query(query)\n",
    "    \n",
    "    #getting a cursor to fetch the view and download it as a csv file\n",
    "    mycursor = loader.get_cursor()\n",
    "    mycursor.execute(\"SELECT * FROM ProductsSalesView\")\n",
    "\n",
    "    # Fetch data from the cursor\n",
    "    data = mycursor.fetchall()\n",
    "    \n",
    "    #getting the header \n",
    "    header = [desc[0] for desc in mycursor.description]\n",
    "    \n",
    "    with open('ProductSalesView.csv', 'w', newline='') as csv_file:\n",
    "            csv_writer = csv.writer(csv_file)\n",
    "            # Write header\n",
    "            csv_writer.writerow(header)\n",
    "            \n",
    "            # Write data rows\n",
    "            csv_writer.writerows(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "id": "02bab99f",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c19fd4e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
